#include <mcp2515.h>
#include <SPI.h>
#include <SoftwareSerial.h>

// DWIN Protocol
#define Rx_SIZE             12
#define Tx_SIZE              8
#define DWIN_HD_BC_SIZE      3

#define DWIN_FM_BC           2
#define DWIN_FM_VPH          4
#define DWIN_FM_VPL          5

#define DWIN_FM_TPH          7
#define DWIN_FM_TPL          8

#define DWIN_FM_DTH          6
#define DWIN_FM_DTL          7

uint8_t dwin_tx_data[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x51, 0x00, 0x00, 0x00 }; // Frame for sending data
byte dwin_rx_data[Rx_SIZE]; // Receive buffer
uint8_t index = 0; // byte's index of DWIN frame 
uint8_t byte_count = Rx_SIZE; // Maximun receive size of DWIN frame
boolean rx_completed = false; // Receive completed flag
boolean sw_flag = LOW;
const unsigned int vp_LidarB_led = 0x5000; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î Address led lidar behind
const unsigned int vp_LidarF_led = 0x5010; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î Address led lidar front
const unsigned int vp_DistB = 0x5020; //‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á
const unsigned int vp_angleB = 0x5030; //‡∏°‡∏∏‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á
const unsigned int vp_angleF = 0x5040; //‡∏°‡∏∏‡∏°‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
const unsigned int vp_DistF = 0x5200; //‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤

// VP Address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ç‡∏≠‡∏á LiDAR 1 ‡πÅ‡∏•‡∏∞ LiDAR 2
const unsigned int vp_thresholdLidar1_increase = 0x6004;
const unsigned int vp_thresholdLidar1_decrease = 0x6005;
const unsigned int vp_thresholdLidar2_increase = 0x6006;
const unsigned int vp_thresholdLidar2_decrease = 0x6007;

// VP Address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
const unsigned int vp_thresholdLidar1_display = 0x6000;  // VP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á LiDAR 1
const unsigned int vp_thresholdLidar2_display = 0x6002;  // VP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á LiDAR 2

#define PAGE_SWITCH_VP 0x0084  // VP Address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏à‡∏≠ DWIN
#define PAGE_0 0x0000          // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
#define PAGE_1 0x0001          // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ avgDist1 < thresholdDistanceLidar1
#define PAGE_2 0x0002          // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ avgDist2 < thresholdDistanceLidar2

MCP2515 mcp2515(10); // ‡πÉ‡∏ä‡πâ CS ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤ 10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CAN Bus
SoftwareSerial dwinSerial(2, 3); // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≤ 3 (TX) ‡πÅ‡∏•‡∏∞ 2 (RX) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DWIN Display

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å CAN Bus
int16_t latestDistanceB = -1;  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô -1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
int16_t latestAngleB = -1;     // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô -1 ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
int16_t latestDistanceF = -1;  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô -1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
int16_t latestAngleF = -1;     // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô -1 ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô

int thresholdDistanceLidar1 = 10;
int thresholdDistanceLidar2 = 10;

unsigned long lastRequestTime = 0;
const unsigned long requestInterval = 300;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ timeout ‡∏Ç‡∏≠‡∏á DistanceB (0x200)
unsigned long lastReceivedDistanceBTime = 0;
bool isLidarB_LedOn = false;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ timeout ‡∏Ç‡∏≠‡∏á DistanceF (0x204)
unsigned long lastReceivedDistanceFTime = 0;
bool isLidarF_LedOn = false;

const unsigned long distanceTimeout = 500; // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

void setup() {
    Serial.begin(115200);
    dwinSerial.begin(115200);
    delay(1000);

    SPI.begin();
    mcp2515.reset();
    mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏õ‡πá‡∏ô 500kbps
    mcp2515.setNormalMode();
    Serial.println("‚úÖ Master Receiver Ready");  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á CAN Bus
    uint8_t canStatus = mcp2515.getStatus();
    Serial.print("üü¢ CAN Bus Status: 0x");
    Serial.println(canStatus, HEX);
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastRequestTime >= requestInterval) {
    lastRequestTime = currentMillis;

    // Request from Sender1
    sendRequestToSlave(0x310); delay(10);

    // Request from Sender2
    sendRequestToSlave(0x311);
  }
  receiveCanData();
  receiveThresholdFromDWIN();
  
  checkDistanceTimeout();  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
}

void sendRequestToSlave(uint16_t requestID) {
  struct can_frame reqMsg;
  reqMsg.can_id = requestID;
  reqMsg.can_dlc = 1;
  reqMsg.data[0] = 0x01;
  mcp2515.sendMessage(&reqMsg);
  Serial.print("üì§ Request sent to slave ID: 0x");
  Serial.println(requestID, HEX);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CAN Bus
void receiveCanData() {
    struct can_frame canMsg;

    if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) {
    Serial.print("üì• ID: 0x"); Serial.print(canMsg.can_id, HEX);
    Serial.print(" | Data: "); Serial.println((canMsg.data[0] << 8) | canMsg.data[1]);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CAN ID ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        switch (canMsg.can_id) {
            case 0x200:  // ‡∏Ñ‡πà‡∏≤ DistanceB
{
    int16_t newDistanceB = (canMsg.data[0] << 8) | canMsg.data[1];
    if (newDistanceB != latestDistanceB) {
        latestDistanceB = newDistanceB;
        Serial.print("üìè DistanceB: ");
        Serial.println(latestDistanceB);
        TxDWIN(vp_DistB, latestDistanceB);
        lastReceivedDistanceBTime = millis();  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        if (latestDistanceB < thresholdDistanceLidar1) {
            if (!isLidarB_LedOn) {
                TxDWIN(vp_LidarB_led, 1);
                isLidarB_LedOn = true;
            }
            switchPage(PAGE_1);
        }
    }
}
break;


            case 0x201:  // ‡∏Ñ‡πà‡∏≤ Angle
                latestAngleB = (canMsg.data[0] << 8) | canMsg.data[1];
                Serial.print("üéØ AngleB: ");
                Serial.println(latestAngleB);

                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á DWIN ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ angle ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•'
                TxDWIN(vp_angleB, latestAngleB); 
                
                 
                break;

            case 0x204:  // ‡∏Ñ‡πà‡∏≤ DistanceF
               latestDistanceF = (canMsg.data[0] << 8) | canMsg.data[1];
               Serial.print("üìè DistanceF: ");
               Serial.println(latestDistanceF);

              TxDWIN(vp_DistF, latestDistanceF);
              lastReceivedDistanceFTime = millis();  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤

              if (latestDistanceF < thresholdDistanceLidar1) {
                 if (!isLidarF_LedOn) {
                 TxDWIN(vp_LidarF_led, 1);  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü
                 isLidarF_LedOn = true;
              }
              switchPage(PAGE_2);
               }
           break;


            case 0x205:  // ‡∏Ñ‡πà‡∏≤ Angle
                latestAngleF = (canMsg.data[0] << 8) | canMsg.data[1];
                Serial.print("üéØ AngleF: ");
                Serial.println(latestAngleF);
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á DWIN ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ angle ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                TxDWIN(vp_angleF, latestAngleF); 
                break;      

            default:
                Serial.println("‚ùì [WARNING] Unknown CAN ID Received");
                break;
        }

    } 
} 


void receiveThresholdFromDWIN() {
  uint8_t buffer[2];
  while (dwinSerial.available() >= 2) {
        dwinSerial.readBytes(buffer, 2);
        int vp = (buffer[0] << 8) | buffer[1];

        bool thresholdUpdated = false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ç‡∏≠‡∏á LiDAR 1
        if (vp == vp_thresholdLidar1_increase) {
            thresholdDistanceLidar1 += 10;
            TxDWIN(vp_thresholdLidar1_display, thresholdDistanceLidar1);
            thresholdUpdated = true;
        } else if (vp == vp_thresholdLidar1_decrease) {
            thresholdDistanceLidar1 -= 10;
            TxDWIN(vp_thresholdLidar1_display, thresholdDistanceLidar1);
            thresholdUpdated = true;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡∏Ç‡∏≠‡∏á LiDAR 2
        if (vp == vp_thresholdLidar2_increase) {
            thresholdDistanceLidar2 += 10;
            TxDWIN(vp_thresholdLidar2_display, thresholdDistanceLidar2);
            thresholdUpdated = true;
        } else if (vp == vp_thresholdLidar2_decrease) {
            thresholdDistanceLidar2 -= 10;
            TxDWIN(vp_thresholdLidar2_display, thresholdDistanceLidar2);
            thresholdUpdated = true;
        }

        // ‡∏™‡πà‡∏á threshold ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Sender (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á)
        if (thresholdUpdated) {
            sendThresholdBackToSender(thresholdDistanceLidar1, 0x203);  // LiDAR1
            sendThresholdBackToSender(thresholdDistanceLidar2, 0x208);  // LiDAR2
        }
  }
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ threshold ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô CAN Bus
void sendThresholdBackToSender(int thresholdValue, uint16_t canID) {
    struct can_frame canMsg;
    canMsg.can_id = canID;
    canMsg.can_dlc = 2;
    canMsg.data[0] = highByte(thresholdValue);
    canMsg.data[1] = lowByte(thresholdValue);

    if (mcp2515.sendMessage(&canMsg) == MCP2515::ERROR_OK) {
        Serial.print("‚úÖ Sent threshold ");
        Serial.print(thresholdValue);
        Serial.print(" to sender ID: 0x");
        Serial.println(canID, HEX);
    } else {
        Serial.println("‚ùå Error sending threshold to sender.");
    }
}

void switchPage(uint16_t pageNumber) {
    uint8_t txData[10] = {
        0x5A, 0xA5,             // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        0x07,                   // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        0x82,                   // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
        highByte(PAGE_SWITCH_VP), lowByte(PAGE_SWITCH_VP), // VP Address 0x0084
        0x5A, 0x01,             // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 0x5A01
        highByte(pageNumber), lowByte(pageNumber)          // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    };
    dwinSerial.write(txData, sizeof(txData));  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏≠ DWIN
    dwinSerial.flush();
}

// üì° **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á DWIN**
void TxDWIN(uint16_t vp, uint16_t value) {
    uint8_t txData[8] = { 
        0x5A, 0xA5, // Header
        0x05,       // Frame Length
        0x82,       // Write Command
        highByte(vp), lowByte(vp),
        highByte(value), lowByte(value)
    };
    Serial.print("üì° Sending to DWIN | VP: 0x");
    Serial.print(vp, HEX);
    Serial.print(" | Value: ");
    Serial.println(value);

    dwinSerial.write(txData, sizeof(txData));
    dwinSerial.flush();
}
void checkDistanceTimeout() {
    unsigned long now = millis();

    // üî∏ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ù‡∏±‡πà‡∏á B
    if ((now - lastReceivedDistanceBTime > distanceTimeout) && isLidarB_LedOn) {
        TxDWIN(vp_LidarB_led, 0);  // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü
        isLidarB_LedOn = false;
        Serial.println("‚ö†Ô∏è DistanceB timeout: turning off LED");
    }

    // üî∏ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ù‡∏±‡πà‡∏á F
    if ((now - lastReceivedDistanceFTime > distanceTimeout) && isLidarF_LedOn) {
        TxDWIN(vp_LidarF_led, 0);  // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü
        isLidarF_LedOn = false;
        Serial.println("‚ö†Ô∏è DistanceF timeout: turning off LED");
    }
}
